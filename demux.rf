param (
	samplesheet string // local sample sheet
	bcl_dir string     // "s3://czbiohub-seqbot/bcl/[runID]"
	outdir string 	   // "s3://bucket/path/to/output"
	no_undetermined = false
)

val dirs = make("$/dirs")

//bcl2fastq behavioral options:
// --adapter-stringency 
// --barcode-mismatches
// --create-fastq-for-indexreads
// --ignore-missing-bcls
// --ignore-missing-filter
// --ignore-missing-positions
// --minimum-trimmed-readlength
// --mask-short-adapter-reads
// --tiles
// --use-bases-mask
// --with-failed-reads 
// --write-fastq-reversecomplement
// --no-bgzf-compression 
// --fastq-compression-level
// --no-lane-splitting 
// --find-adapters-withsliding-window

func bcl2fastq(samplesheet file, bcl_path dir) =
    exec(image := "czbiohub/bcl2fastq", mem := 64*GiB) (out dir) {"
    	bcl2fastq --no-lane-splitting --sample-sheet {{samplesheet}} -R {{bcl_path}} -o {{out}}
    "}

func removeUndetermined(demuxed dir) dir = 
    exec(image := "ubuntu") (output dir) {"
    	shopt -s extglob
    	cp {{demuxed}}/!(Undetermined*) {{output}}
    	shopt -u extglob
    "}

// cp -r {{demuxed}} {{output}}
// rm {{output}}/0/Undetermined*

val samplesheet = file(samplesheet)
val bcl_dir = dir(bcl_dir)
demuxed_output := bcl2fastq(samplesheet, bcl_dir)

val fastq_output = if no_undetermined {
	removeUndetermined(demuxed_output)
} else {
	demuxed_output
}

@requires(cpu := 8, mem := 32*GiB, disk := 200*GiB)
val Main = dirs.Copy(fastq_output, outdir)
