param (
    // local sample sheet
    samplesheet string

    // "s3://czbiohub-seqbot/bcl/[runID]"
    bcl_path string

    // "s3://bucket/path/to/output"
    output_path string

    // if set, use 10x cellranger to demux
    cellranger = false

    // if > 0, signifies batch run: ignore Undetermined reads and save reports/ 
    // and stats/ to different path, only applies to bcl2fastq (not 10x)
    batch_runID = 0

    // if set, run bcl2fastq with no lane splitting, only applies to bcl2fastq (not 10x)
    no_lane_splitting = false

    // czbiohub docker image containing bcl2fastq and cellranger
    docker_image = "czbiohub/demuxer" 
)

val dirs = make("$/dirs")

// bcl2fastq behavioral options:
// --adapter-stringency 
// --barcode-mismatches
// --create-fastq-for-indexreads
// --ignore-missing-bcls
// --ignore-missing-filter
// --ignore-missing-positions
// --minimum-trimmed-readlength
// --mask-short-adapter-reads
// --tiles
// --use-bases-mask
// --with-failed-reads 
// --write-fastq-reversecomplement
// --no-bgzf-compression 
// --fastq-compression-level
// --no-lane-splitting 
// --find-adapters-withsliding-window

// Runs bcl2fastq with --no-lane-splitting option.
func bcl2fastq_no_split(samplesheet file, bcl_dir dir) =
    exec(image := docker_image, mem := 64*GiB) (out dir) {"
        bcl2fastq --no-lane-splitting --sample-sheet {{samplesheet}} -R {{bcl_dir}} -o {{out}}
    "}

// Runs bcl2fastq with lane splitting.
func bcl2fastq_split(samplesheet file, bcl_dir dir) =
    exec(image := docker_image, mem := 64*GiB) (out dir) {"
        bcl2fastq --sample-sheet {{samplesheet}} -R {{bcl_dir}} -o {{out}}
    "}

// Removes Undetermined files from demuxed directory. Used in batch runs.
func removeUndetermined(demuxed dir, batch_runID int) dir = 
    exec(image := "ubuntu") (out dir) {"
        shopt -s extglob
        cp {{demuxed}}/!(Undetermined*|Stats|Reports) {{out}}
        shopt -u extglob
        
        mkdir {{out}}/Reports
        mkdir {{out}}/Stats
        cp -r {{demuxed}}/Reports {{out}}/Reports/Reports_{{batch_runID}}
        cp -r {{demuxed}}/Stats {{out}}/Stats/Stats_{{batch_runID}}
    "}

// bcl2fastq wrapper. Takes care of the -no-lane-splitting and -batch_runID flags.
func bcl2fastqRun(samplesheet file, bcl_dir dir) dir = {
    val demuxed_output = if no_lane_splitting {
        bcl2fastq_no_split(samplesheet, bcl_dir)
    } else {
        bcl2fastq_split(samplesheet, bcl_dir)
    }

    val fastq_output = if batch_runID > 0 {
        removeUndetermined(demuxed_output, batch_runID)
    } else {
        demuxed_output
    }

    fastq_output
}

// Runs 10x cellranger.
func cellRangerRun(samplesheet file, bcl_dir dir) =
    exec(image := docker_image, mem := 64*GiB) (out dir) {"
        cellranger mkfastq --localmem=60 --sample-sheet {{samplesheet}} --run {{bcl_dir}} --output-dir {{out}}
    "}

@requires(cpu := 8, mem := 32*GiB, disk := 200*GiB)
val Main = {
    samplesheet := file(samplesheet)
    bcl_dir := dir(bcl_path)

    val fastq_output = if cellranger {
        cellRangerRun(samplesheet, bcl_dir)
    } else {
        bcl2fastqRun(samplesheet, bcl_dir)
    }

    dirs.Copy(fastq_output, output_path)
}
